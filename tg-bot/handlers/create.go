package handlers

import (
	"encoding/json"
	"fmt"
	"net/http"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
	"go.uber.org/zap"
)

// Response –æ–ø–∏—Å—ã–≤–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ª—É—á–∞–µ–º—ã—Ö –æ—Ç API
type Response struct {
	ID          int            `json:"id"`
	Title       string         `json:"title"`
	Ingredients map[string]int `json:"ingredients"`
	RecipeText  string         `json:"recipe_text"`
}

// GetHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /get, –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
func GetHandler(bot *tgbotapi.BotAPI, update tgbotapi.Update, logger *zap.Logger) {
	apiURL := "http://localhost:8080/api/recipes/all/"

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET-–∑–∞–ø—Ä–æ—Å
	resp, err := http.Get(apiURL)
	if err != nil {
		logger.Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API", zap.Error(err))
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤ üò¢")
		bot.Send(msg)
		return
	}
	defer resp.Body.Close()

	// –î–µ–∫–æ–¥–∏—Ä—É–µ–º JSON-–æ—Ç–≤–µ—Ç
	var recipes []Response
	if err := json.NewDecoder(resp.Body).Decode(&recipes); err != nil {
		logger.Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ JSON", zap.Error(err))
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö üò¢")
		bot.Send(msg)
		return
	}

	// –ï—Å–ª–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –Ω–µ—Ç
	if len(recipes) == 0 {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ú–∞—Ä—à—Ä—É—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç üòï")
		bot.Send(msg)
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	var messages []string
	for _, recipe := range recipes {
		ingredients := make([]string, 0, len(recipe.Ingredients))
		for name, quantity := range recipe.Ingredients {
			ingredients = append(ingredients, fmt.Sprintf("- %s: %d", name, quantity))
		}

		message := fmt.Sprintf(
			"üçΩ *%s*\n\nüìã *–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Å—Ç–∞:*\n%s\n\nüìù *–ú–∞—Ä—à—Ä—É—Ç:*\n%s",
			recipe.Title,
			strings.Join(ingredients, "\n"),
			recipe.RecipeText,
		)
		messages = append(messages, message)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ—Ü–µ–ø—Ç—ã (–ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –¥–ª–∏–Ω–µ)
	for _, msgText := range messages {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, msgText)
		msg.ParseMode = "Markdown"
		bot.Send(msg)
	}
}
